/*

package com.example.api;

import java.io.*;
import java.text.SimpleDateFormat;
import java.util.*;
import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

import com.example.model.*;

@RestController
public class ApiListaArchivosDetalle {

    @PostMapping("/api/lista/detalle")
    public ResponseEntity<List<String>> listFiles(@RequestBody ListaArchivosRequest request) {
        String directorio = request.getDirectorio();
        String parametro = request.getParametro();
        HttpHeaders headersFolder = new HttpHeaders();

        File folder = new File(directorio);
        if (!folder.exists() || !folder.isDirectory()) {
            headersFolder.add("X-Error-Message", "El directorio especificado no existe o no es v√°lido.");
            return ResponseEntity.badRequest().headers(headersFolder).build();
        } else {
            File[] files = folder.listFiles();
            List<String> matchingFiles = new ArrayList<>();
            if (files != null) {
                for (File file : files) {
                    if (parametro.equals("*") || file.getName().contains(parametro)) {
                        String detalle = file.getName() + "  " + formatFileSize(file.length()) + "  "
                                + new SimpleDateFormat("dd-MM-yyyy").format(new Date(file.lastModified()));
                        if (file.isFile()) {
                            String extension = getFileExtension(file.getName());
                            detalle += " FILE (" + extension + ")";
                        } else if (file.isDirectory()) {
                            detalle += " FOLDER";
                        }
                        matchingFiles.add(detalle);
                    }
                }
                return new ResponseEntity<>(matchingFiles, HttpStatus.OK);
            }
            return new ResponseEntity<>(HttpStatus.OK);
        }
    }

    private String formatFileSize(long size) {
        String[] units = { "B", "KB", "MB", "GB", "TB" };
        int index = 0;
        double fileSize = size;
        while (fileSize > 1024 && index < units.length - 1) {
            fileSize /= 1024;
            index++;
        }
        return String.format("%.2f %s", fileSize, units[index]);
    }

    private String getFileExtension(String fileName) {
        int dotIndex = fileName.lastIndexOf(".");
        if (dotIndex > 0 && dotIndex < fileName.length() - 1) {
            return fileName.substring(dotIndex + 1);
        }
        return "";
    }
}

*/